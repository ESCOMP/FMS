!***********************************************************************
!*                   GNU Lesser General Public License
!*
!* This file is part of the GFDL Flexible Modeling System (FMS).
!*
!* FMS is free software: you can redistribute it and/or modify it under
!* the terms of the GNU Lesser General Public License as published by
!* the Free Software Foundation, either version 3 of the License, or (at
!* your option) any later version.
!*
!* FMS is distributed in the hope that it will be useful, but WITHOUT
!* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
!* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
!* for more details.
!*
!* You should have received a copy of the GNU Lesser General Public
!* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
!***********************************************************************

character(len=18), public, parameter :: constants_version = 'FMSConstants: CESM'

!-----------------------------------------------------------------------
! The following variables are overridden by CESM values in order to keep
! dynamics and physics values consistent and allow a more accurate comparison
! of energy between dynamics and physics.

! Constants below use CESM shr values

real(R8),   public, parameter :: KAPPA  = RDGAS/CP_AIR             !< RDGAS / CP_AIR [dimensionless]
real(R8),   public, parameter :: RHO0R   = 1.0_r8/RHO0        	   !< Reciprocal of average density of sea water [m^3/kg]
real(R8),   public, parameter :: RHO_CP  = RHO0*CP_OCEAN           !< (kg/m^3)*(cal/kg/deg C)(joules/cal) =
                                                                   !<(joules/m^3/deg C) [J/m^3/deg]
real(R8),   public, parameter :: ES0 = 1.0_r8                      !< Humidity factor. Controls the humidity content of the
                                                                   !< atmosphere through the Saturation Vapour Pressure
                                                                   !< expression when using DO_SIMPLE. [dimensionless]
real(R8),   public, parameter :: HLS = HLV + HLF                   !< Latent heat of sublimation [J/kg]
real(R8),   public, parameter :: WTMOZONE =  47.99820_r8           !< Molecular weight of ozone [AMU]
real(R8),   public, parameter :: WTMC     =  12.00000_r8           !< Molecular weight of carbon [AMU]
real(R8),   public, parameter :: WTMCO2   =  44.00995_r8           !< Molecular weight of carbon dioxide [AMU]
real(R8),   public, parameter :: WTMCH4   =  16.0425_r8            !< Molecular weight of methane [AMU]
real(R8),   public, parameter :: WTMO2    =  31.9988_r8            !< Molecular weight of molecular oxygen [AMU]
real(R8),   public, parameter :: WTMCFC11 = 137.3681_r8            !< Molecular weight of CFC-11 (CCl3F) [AMU]
real(R8),   public, parameter :: WTMCFC12 = 120.9135_r8            !< Molecular weight of CFC-21 (CCl2F2) [AMU]
real(R8),   public, parameter :: WTMN     =  14.0067_r8            !< Molecular weight of Nitrogen [AMU]
real(R8),   public, parameter :: DIFFAC   = 1.660000E+00_r8        !< Diffusivity factor [dimensionless]
real(R8),   public, parameter :: PSTD_MKS = SHR_CONST_PSTD         !< standard pressure ~ pascals
real(R8),   public, parameter :: PSTD     = SHR_CONST_PSTD*10.0_r8 !< convert cesm units N/m^2 to dynes/cm^2
real(R8),   public, parameter :: SECONDS_PER_HOUR   = 3600._r8     !< Seconds in an hour [s]
real(R8),   public, parameter :: SECONDS_PER_MINUTE = 60._r8       !< Seconds in a minute [s]
real(R8),   public, parameter :: RAD_TO_DEG         = 180._r8/PI   !< Degrees per radian [deg/rad]
real(R8),   public, parameter :: DEG_TO_RAD         = PI/180._r8   !< Radians per degree [rad/deg]
real(R8),   public, parameter :: RADIAN             = RAD_TO_DEG   !< Equal to RAD_TO_DEG for backward compatability. [rad/deg]
real(R8),   public, parameter :: ALOGMIN            = -50.0_r8     !< Minimum value allowed as argument to log function [N/A]
real(R8),   public, parameter :: EPSLN              = 1.0e-40_r8   !< A small number to prevent divide by zero exceptions [N/A]
real(R8),   public, parameter :: RADCON = ((1.0E+02_r8*GRAV)/(1.0E+04_r8*CP_AIR))*SECONDS_PER_DAY !< convert flux divergence
                                                                   !to heating rate in degrees per day [deg sec/(cm day)]
real(R8),   public, parameter :: RADCON_MKS  = (GRAV/CP_AIR)*SECONDS_PER_DAY !< Factor used to convert flux divergence to
                                                                   !< heating rate in degrees per day [deg sec/(m day)]
real(R8),   public, parameter :: O2MIXRAT    = 2.0953E-01_r8       !< Mixing ratio of molecular oxygen in air [dimensionless]
real(R8),   public, parameter :: C2DBARS     = 1.e-4_r8            !< rho*g*z(mks) to dbars: 1dbar = 10^4 (kg/m^3)(m/s^2)m [dbars]
real(R8),   public, parameter :: KELVIN      = 273.15_r8           !< Degrees Kelvin at zero Celsius [K]

#ifdef SMALL_EARTH
#if defined(DCMIP) || (defined(HIWPP) && defined(SUPER_K))
 real, public, parameter :: small_fac =  1._r8 / 120._r8   ! only needed for supercell test
#elif defined(HIWPP)
 real, public, parameter :: small_fac = 1._r8 / 166.7_r8
#else
 real, public, parameter :: small_fac = 1._r8 / 10._r8
#endif
#else
 real, public, parameter :: small_fac = 1._r8
#endif